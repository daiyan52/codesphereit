[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Laboratory Report",
  "enabled": 1,
  "modified": "2025-07-22 23:25:01.282343",
  "module": "codesphereit",
  "name": "Laboratory Report",
  "script": "frappe.ui.form.on('Lap Item', {\n    rate: update_total_amount,\n    range: update_total_amount,\n    sample_type_remove: update_total_amount,\n});\n\nfunction update_total_amount(frm) {\n    let total = 0;\n    (frm.doc.sample_type || []).forEach(row => {\n        total += (parseFloat(row.rate) || 0); // Or use row.rate * row.range\n    });\n    frm.set_value('total_amount', total);\n}\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Laboratory Report",
  "enabled": 1,
  "modified": "2025-07-22 23:55:37.311712",
  "module": "codesphereit",
  "name": "Laboratory Report 1",
  "script": "\n// frappe.ui.form.on('Lap Item', {\n//     range(frm, cdt, cdn) {\n//         const row = locals[cdt][cdn];\n\n//         const range = parseFloat(row.range);\n//         const [min, max] = (row.reference_ranges || '').split('-').map(Number);\n\n//         if (!isNaN(min) && !isNaN(max) && !isNaN(range)) {\n//             const status = (range >= min && range <= max) ? 'Normal' : 'Abnormal';\n//             frappe.model.set_value(cdt, cdn, 'result_status', status);\n//         } else {\n//             frappe.model.set_value(cdt, cdn, 'result_status', '');\n//         }\n//     }\n// });\n\n\nfrappe.ui.form.on('Lap Item', {\n    range(frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        const range = parseFloat(row.range);\n        const [min, max] = (row.reference_ranges || '').split('-').map(Number);\n\n        let status = '';\n        let color = 'black';\n\n        if (!isNaN(min) && !isNaN(max) && !isNaN(range)) {\n            if (range >= min && range <= max) {\n                status = 'Normal';\n                color = 'green';\n            } else {\n                status = 'Abnormal';\n                color = 'red';\n            }\n        }\n\n        frappe.model.set_value(cdt, cdn, 'result_status', status);\n\n        // Use your preferred logic to color the input\n        setTimeout(() => {\n            const grid_row = frm.fields_dict.sample_type.grid.get_row(cdn);\n            if (grid_row && grid_row.fields_dict.range) {\n                grid_row.fields_dict.range.$wrapper\n                    .find('.form-control')\n                    .css('color', color);\n            }\n        }, 100);\n    }\n});\n",
  "view": "Form"
 }
]